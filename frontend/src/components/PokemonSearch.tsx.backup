import React, { useState } from 'react';
import { pokemonAPI } from '../services/api';
import { Pokemon } from '../types';
import {
  FormCard,
  Form,
  FormGroup,
  Label,
  Input,
  Button,
  DataList,
  DataItem,
  DataInfo,
  DataLabel,
  DataValue,
} from './styled';

interface PokemonSearchProps {
  onPokemonSelected: (pokemon: Pokemon) => void;
}

const PokemonSearch: React.FC<PokemonSearchProps> = ({ onPokemonSelected }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState<Pokemon[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon | null>(null);

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!searchTerm.trim()) return;

    setLoading(true);
    try {
      const results = await pokemonAPI.searchPokemon(searchTerm);
      setSearchResults(results);
    } catch (error) {
      console.error('Error searching Pokemon:', error);
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  };

  const handlePokemonClick = (pokemon: Pokemon) => {
    setSelectedPokemon(pokemon);
    onPokemonSelected(pokemon);
  };

  return (
    <FormCard>
      <h2>Search Pokemon</h2>
      <Form onSubmit={handleSearch}>
        <FormGroup>
          <Label htmlFor="search">Pokemon Name</Label>
          <Input
            type="text"
            id="search"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Enter Pokemon name..."
            required
          />
        </FormGroup>
        <Button type="submit" disabled={loading}>
          {loading ? 'Searching...' : 'Search'}
        </Button>
      </Form>

      {searchResults.length > 0 && (
        <DataList style={{ marginTop: '20px' }}>
          <h3>Search Results</h3>
          {searchResults.map((pokemon) => (
            <DataItem 
              key={pokemon._id}
              onClick={() => handlePokemonClick(pokemon)}
              style={{ cursor: 'pointer', backgroundColor: selectedPokemon?._id === pokemon._id ? '#e3f2fd' : 'transparent' }}
            >
              <DataInfo>
                <DataLabel>{pokemon.name} (#{pokemon.pokemonId})</DataLabel>
                <DataValue>
                  Types: {pokemon.types.join(', ')} | 
                  Stage: {pokemon.evolutionStage} | 
                  HP: {pokemon.stats.hp} | 
                  Attack: {pokemon.stats.attack}
                </DataValue>
              </DataInfo>
            </DataItem>
          ))}
        </DataList>
      )}

      {selectedPokemon && (
        <div style={{ marginTop: '20px', padding: '16px', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
          <h3>{selectedPokemon.name} Details</h3>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px', marginTop: '10px' }}>
            <div><strong>ID:</strong> {selectedPokemon.pokemonId}</div>
            <div><strong>Types:</strong> {selectedPokemon.types.join(', ')}</div>
            <div><strong>Height:</strong> {selectedPokemon.height / 10}m</div>
            <div><strong>Weight:</strong> {selectedPokemon.weight / 10}kg</div>
            <div><strong>Evolution Stage:</strong> {selectedPokemon.evolutionStage}</div>
            <div><strong>Fetched:</strong> {new Date(selectedPokemon.fetchedAt).toLocaleDateString()}</div>
          </div>
          <div style={{ marginTop: '15px' }}>
            <h4>Stats:</h4>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '8px' }}>
              <div>HP: {selectedPokemon.stats.hp}</div>
              <div>Attack: {selectedPokemon.stats.attack}</div>
              <div>Defense: {selectedPokemon.stats.defense}</div>
              <div>Sp. Attack: {selectedPokemon.stats.specialAttack}</div>
              <div>Sp. Defense: {selectedPokemon.stats.specialDefense}</div>
              <div>Speed: {selectedPokemon.stats.speed}</div>
            </div>
          </div>
        </div>
      )}
    </FormCard>
  );
};

export default PokemonSearch;
